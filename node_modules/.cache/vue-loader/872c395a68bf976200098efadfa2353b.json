{"remainingRequest":"/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/node_modules/pug-plain-loader/index.js!/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/src/views/curso/Tema3.vue?vue&type=template&id=6e660a69&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/src/views/curso/Tema3.vue","mtime":1736401829332},{"path":"/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Civil_y_Bienes/U1_Civil_y_Bienes/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjdXJzby1tYWluLWNvbnRhaW5lciBwYi0zIn0sW19jKCdCYW5uZXJJbnRlcm5vJyx7YXR0cnM6eyJzdWJUaXR1bG8iOiczLiBQcm9waWVkYWRlcyBjb211bmVzIHkgcHJpdmFkYXMnfX0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29udGFpbmVyIHRhcmpldGEgdGFyamV0YS0tYmxhbmNhIHAtNCBwLW1kLTUgb3ZlcmZsb3ctaGlkZGVuIn0sW192bS5fbSgwKSxfYygnaDInLHtzdGF0aWNDbGFzczoibWItNSIsYXR0cnM6eyJkYXRhLWFvcyI6ImZhZGUtcmlnaHQifX0sW192bS5fdigiUHJvcGllZGFkZXMgY29tdW5lcyIpXSksX3ZtLl9tKDEpLF9jKCdoMicse3N0YXRpY0NsYXNzOiJtYi01IixhdHRyczp7ImRhdGEtYW9zIjoiZmFkZS1yaWdodCJ9fSxbX3ZtLl92KCJCaWVuZXMgZGUgdXNvIHDDumJsaWNvIildKSxfYygncCcse3N0YXRpY0NsYXNzOiJtYi01In0sW192bS5fdigiTG9zIGJpZW5lcyBkZSB1c28gcMO6YmxpY28gcGVydGVuZWNlbiBhbCBFc3RhZG8geSBlc3TDoW4gZGVzdGluYWRvcyBhbCBkaXNmcnV0ZSBnZW5lcmFsIGRlIGxhIHBvYmxhY2nDs24uIEVqZW1wbG9zIHTDrXBpY29zIHNvbiBsYXMgY2FycmV0ZXJhcywgcsOtb3MsIHBsYXlhcyB5IHBsYXphcyBww7pibGljYXMuIEVzdG9zIGJpZW5lcyBzb24gaW5hbGllbmFibGVzLCBpbXByZXNjcmlwdGlibGVzIGUgaW5lbWJhcmdhYmxlcywgc2Vnw7puIGxvIGVzdGFibGVjaWRvIGVuIGVsIEFydMOtY3VsbyA2MyBkZSBsYSBDb25zdGl0dWNpw7NuIFBvbMOtdGljYS4gU3UgZ2VzdGnDs24gZXN0w6EgYSBjYXJnbyBkZWwgRXN0YWRvLCBxdWUgZGViZSBnYXJhbnRpemFyIHN1IGFjY2VzaWJpbGlkYWQsIG1hbnRlbmltaWVudG8geSBwcm90ZWNjacOzbiwgcGFyYSBldml0YXIgc3UgZGV0ZXJpb3JvIG8gYXByb3BpYWNpw7NuIGluZGViaWRhLiIpXSksX3ZtLl9tKDIpLF9jKCdoMicse3N0YXRpY0NsYXNzOiJtYi01IixhdHRyczp7ImRhdGEtYW9zIjoiZmFkZS1yaWdodCJ9fSxbX3ZtLl92KCJCaWVuZXMgY29tdW5lcyBwcml2YWRvcyIpXSksX3ZtLl9tKDMpLF92bS5fbSg0KSxfYygnaDInLHtzdGF0aWNDbGFzczoibWItNSIsYXR0cnM6eyJkYXRhLWFvcyI6ImZhZGUtcmlnaHQifX0sW192bS5fdigiUHJvcGllZGFkZXMgcHJpdmFkYXMiKV0pLF92bS5fbSg1KSxfYygnaDInLHtzdGF0aWNDbGFzczoibWItNSIsYXR0cnM6eyJkYXRhLWFvcyI6ImZhZGUtcmlnaHQifX0sW192bS5fdigiSGlzdG9yaWEgZGUgbGEgcHJvcGllZGFkIHByaXZhZGEiKV0pLF92bS5fbSg2KSxfYygncCcse3N0YXRpY0NsYXNzOiJtYi01In0sW192bS5fdigiRW4gZWwgc2lnbG8gWFgsIGxhIHZpc2nDs24gc29icmUgbGEgcHJvcGllZGFkIHByaXZhZGEgc2UgYW1wbGnDsyBwYXJhIGluY2x1aXIgc3UgZnVuY2nDs24gc29jaWFsLiBFc3RlIGNvbmNlcHRvIHF1ZWTDsyBjb25zYWdyYWRvIGVuIGxhIENvbnN0aXR1Y2nDs24gZGUgMTk5MSwgcXVlIHJlY29ub2NlIGxhIHByb3BpZWRhZCBwcml2YWRhIGNvbW8gdW4gZGVyZWNobyBpbnZpb2xhYmxlLCBwZXJvIGNvbmRpY2lvbmFkbyBhbCBpbnRlcsOpcyBnZW5lcmFsLiBMYSBDb25zdGl0dWNpw7NuIHBlcm1pdGUgbGEgZXhwcm9waWFjacOzbiBkZSBiaWVuZXMgcHJpdmFkb3MgcG9yIG1vdGl2b3MgZGUgdXRpbGlkYWQgcMO6YmxpY2EgbyBpbnRlcsOpcyBzb2NpYWwsIHNpZW1wcmUgY29uIGluZGVtbml6YWNpw7NuIGp1c3RhIHkgcHJldmlhLiIpXSksX2MoJ2gyJyx7c3RhdGljQ2xhc3M6Im1iLTUiLGF0dHJzOnsiZGF0YS1hb3MiOiJmYWRlLXJpZ2h0In19LFtfdm0uX3YoIkNvbmNlcHRvIHkgY2FyYWN0ZXLDrXN0aWNhcyIpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoibWItNSJ9LFtfdm0uX3YoIkxhIHByb3BpZWRhZCBwcml2YWRhIG90b3JnYSBhIHN1IHRpdHVsYXIgZWwgZGVyZWNobyBleGNsdXNpdm8gZGUgdXNhciwgZ296YXIgeSBkaXNwb25lciBkZSB1biBiaWVuLCBkZW50cm8gZGUgbG9zIGzDrW1pdGVzIGVzdGFibGVjaWRvcyBwb3IgbGEgbGV5LiBFc3RlIGRlcmVjaG8gc2UgY2FyYWN0ZXJpemEgcG9yOiIpXSksX3ZtLl9tKDcpLF9jKCdoMicse3N0YXRpY0NsYXNzOiJtYi01IixhdHRyczp7ImRhdGEtYW9zIjoiZmFkZS1yaWdodCJ9fSxbX3ZtLl92KCJSZWd1bGFjacOzbiBqdXLDrWRpY2EiKV0pLF92bS5fbSg4KSxfYygnaDInLHtzdGF0aWNDbGFzczoibWItNSIsYXR0cnM6eyJkYXRhLWFvcyI6ImZhZGUtcmlnaHQifX0sW192bS5fdigiQ29tcGFyYWNpw7NuIGVudHJlIHByb3BpZWRhZGVzIGNvbXVuZXMgeSBwcml2YWRhcyIpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoibWItNSJ9LFtfdm0uX3YoIkxhIGRpZmVyZW5jaWFjacOzbiBlbnRyZSBwcm9waWVkYWRlcyBjb211bmVzIHkgcHJpdmFkYXMsIHBlcm1pdGUgZXN0YWJsZWNlciBsYXMgcmVnbGFzIG5lY2VzYXJpYXMgcGFyYSBzdSBtYW5lam8geSBwcm90ZWNjacOzbiBlbiBlbCBtYXJjbyBkZWwgRGVyZWNobyBDaXZpbCBDb2xvbWJpYW5vLiBFc3RhcyBwcm9waWVkYWRlcyBwcmVzZW50YW4gY2FyYWN0ZXLDrXN0aWNhcyBkaXN0aW50aXZhcyBxdWUgaW1wYWN0YW4gZGlyZWN0YW1lbnRlIGxhcyByZWxhY2lvbmVzIGp1csOtZGljYXMsIGVjb27Ds21pY2FzIHkgc29jaWFsZXMuIildKSxfdm0uX20oOSksX2MoJ3AnLHtzdGF0aWNDbGFzczoibWItNSJ9LFtfdm0uX3YoIkVzdGEgdGFibGEgcmVmbGVqYSBjw7NtbyBjYWRhIHRpcG8gZGUgcHJvcGllZGFkIGN1bXBsZSB1biByb2wgZXNwZWPDrWZpY28gZGVudHJvIGRlbCBvcmRlbmFtaWVudG8ganVyw61kaWNvIHkgc29jaWFsLCByZXNwb25kaWVuZG8gYSBuZWNlc2lkYWRlcyBkaXN0aW50YXMsIHBlcm8gY29tcGxlbWVudGFyaWFzLiIpXSksX2MoJ2gyJyx7c3RhdGljQ2xhc3M6Im1iLTUiLGF0dHJzOnsiZGF0YS1hb3MiOiJmYWRlLXJpZ2h0In19LFtfdm0uX3YoIlJldG9zIHkgZGVzYWbDrW9zIGVuIGxhIGdlc3Rpw7NuIGRlIHByb3BpZWRhZGVzIildKSxfYygncCcse3N0YXRpY0NsYXNzOiJtYi01In0sW192bS5fdigiRWwgbWFuZWpvIGRlIHByb3BpZWRhZGVzIGNvbXVuZXMgeSBwcml2YWRhcywgZW5mcmVudGEgZGl2ZXJzb3MgcmV0b3MgcXVlIHJlcXVpZXJlbiBhdGVuY2nDs24sIHRhbnRvIGRlc2RlIGVsIMOhbWJpdG8gbm9ybWF0aXZvIGNvbW8gZGVzZGUgbGEgaW1wbGVtZW50YWNpw7NuIGRlIHBvbMOtdGljYXMgcMO6YmxpY2FzIHkgZ2VzdGnDs24gcHJpdmFkYSBlZmljaWVudGUuIildKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBtYi01In0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLWxnLTYifSxbX2MoJ0ltYWdlbkluZm9ncmFmaWNhJyx7c3RhdGljQ2xhc3M6ImNvbG9yLWFjZW50by1jb250ZW5pZG8iLHNjb3BlZFNsb3RzOl92bS5fdShbe2tleToiaW1hZ2VuIixmbjpmdW5jdGlvbigpe3JldHVybiBbX2MoJ2ZpZ3VyZScsW19jKCdpbWcnLHtzdGF0aWNDbGFzczoibXgtYXV0byIsc3RhdGljU3R5bGU6eyJtYXgtd2lkdGgiOiIxMTA2cHgifSxhdHRyczp7InNyYyI6cmVxdWlyZSgiQC9hc3NldHMvY3Vyc28vdGVtYTMvMTMuc3ZnIiksImFsdCI6IiJ9fSldKV19LHByb3h5OnRydWV9XSl9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImJnLXBwYWwtYXp1bCBib3gtc2hhZG93IHAtMyIsYXR0cnM6eyJ4IjoiMSUiLCJ5IjoiNTAlIiwibnVtZXJvIjoiKyJ9fSxbX2MoJ3VsJyx7c3RhdGljQ2xhc3M6Imxpc3RhLXVsIG1iLTAifSxbX2MoJ2xpJyx7c3RhdGljQ2xhc3M6ImQtZmxleCJ9LFtfYygnaScse3N0YXRpY0NsYXNzOiJsaXN0YS11bF9fdmluZXRhIn0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6Im1iLTAifSxbX2MoJ2InLFtfdm0uX3YoIlByaXZhdGl6YWNpw7NuIGluZGViaWRhLiIpXSksX3ZtLl92KCIgTGEgYXByb3BpYWNpw7NuIGRlIGJpZW5lcyBkZSB1c28gcMO6YmxpY28sIGNvbW8gcGxheWFzIHkgcsOtb3MsIHBvciBwYXJ0aWN1bGFyZXMsIGxpbWl0YSBlbCBhY2Nlc28gY29sZWN0aXZvIHkgZ2VuZXJhIGNvbmZsaWN0b3Mgc29jaWFsZXMuIildKV0pLF9jKCdsaScse3N0YXRpY0NsYXNzOiJkLWZsZXgifSxbX2MoJ2knLHtzdGF0aWNDbGFzczoibGlzdGEtdWxfX3ZpbmV0YSJ9KSxfYygncCcse3N0YXRpY0NsYXNzOiJtYi0wIn0sW19jKCdiJyxbX3ZtLl92KCJGYWx0YSBkZSBtYW50ZW5pbWllbnRvLiIpXSksX3ZtLl92KCIgRW4gY29uanVudG9zIHJlc2lkZW5jaWFsZXMsIGxhIGdlc3Rpw7NuIGRlZmljaWVudGUgZGUgw6FyZWFzIGNvbXVuZXMgcHVlZGUgYWZlY3RhciBsYSBjYWxpZGFkIGRlIHZpZGEgZGUgbG9zIGNvcHJvcGlldGFyaW9zLiIpXSldKSxfYygnbGknLHtzdGF0aWNDbGFzczoiZC1mbGV4In0sW19jKCdpJyx7c3RhdGljQ2xhc3M6Imxpc3RhLXVsX192aW5ldGEifSksX2MoJ3AnLHtzdGF0aWNDbGFzczoibWItMCJ9LFtfYygnYicsW192bS5fdigiUHJlc2nDs24gYW1iaWVudGFsLiIpXSksX3ZtLl92KCIgTGEgc29icmVleHBsb3RhY2nDs24gZGUgcmVjdXJzb3MgbmF0dXJhbGVzIGNvbXBhcnRpZG9zLCBjb21vIHLDrW9zIHkgYm9zcXVlcywgYW1lbmF6YSBzdSBzb3N0ZW5pYmlsaWRhZCB5IGxhIGJpb2RpdmVyc2lkYWQuIildKV0pXSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImJnLXBwYWwtYXp1bCBib3gtc2hhZG93IHAtMyIsYXR0cnM6eyJ4IjoiOTklIiwieSI6IjUwJSIsIm51bWVybyI6IisifX0sW19jKCd1bCcse3N0YXRpY0NsYXNzOiJsaXN0YS11bCBtYi0wIn0sW19jKCdsaScse3N0YXRpY0NsYXNzOiJkLWZsZXgifSxbX2MoJ2knLHtzdGF0aWNDbGFzczoibGlzdGEtdWxfX3ZpbmV0YSJ9KSxfYygncCcse3N0YXRpY0NsYXNzOiJtYi0wIn0sW19jKCdiJyxbX3ZtLl92KCJEZXNpZ3VhbGRhZCBlbiBsYSBkaXN0cmlidWNpw7NuLiIpXSksX3ZtLl92KCIgTGEgY29uY2VudHJhY2nDs24gZGUgdGllcnJhcyB5IHJlY3Vyc29zIGVuIHBvY2FzIG1hbm9zLCBwZXJwZXTDumEgbGEgaW5lcXVpZGFkIHNvY2lhbCB5IGVjb27Ds21pY2EuIildKV0pLF9jKCdsaScse3N0YXRpY0NsYXNzOiJkLWZsZXgifSxbX2MoJ2knLHtzdGF0aWNDbGFzczoibGlzdGEtdWxfX3ZpbmV0YSJ9KSxfYygncCcse3N0YXRpY0NsYXNzOiJtYi0wIn0sW19jKCdiJyxbX3ZtLl92KCJUZW5zaW9uZXMgY29uIGVsIGludGVyw6lzIGNvbGVjdGl2by4iKV0pLF92bS5fdigiIFByb3llY3RvcyBkZSBpbmZyYWVzdHJ1Y3R1cmEgbyBkZXNhcnJvbGxvIHVyYmFubywgcHVlZGVuIGdlbmVyYXIgY29uZmxpY3RvcyBlbnRyZSBlbCBlamVyY2ljaW8gZGVsIGRlcmVjaG8gZGUgcHJvcGllZGFkIHkgbGFzIG5lY2VzaWRhZGVzIHDDumJsaWNhcy4iKV0pXSksX2MoJ2xpJyx7c3RhdGljQ2xhc3M6ImQtZmxleCJ9LFtfYygnaScse3N0YXRpY0NsYXNzOiJsaXN0YS11bF9fdmluZXRhIn0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6Im1iLTAifSxbX2MoJ2InLFtfdm0uX3YoIkZhbHRhIGRlIHNlZ3VyaWRhZCBqdXLDrWRpY2EuICIpXSksX3ZtLl92KCIgRW4gem9uYXMgcnVyYWxlcywgbGEgaW5mb3JtYWxpZGFkIGVuIGxhIHRlbmVuY2lhIGRlIHRpZXJyYXMsIGRpZmljdWx0YSBlbCBhY2Nlc28gYSBjcsOpZGl0b3MgeSBwcm9ncmFtYXMgZGUgZGVzYXJyb2xsby4iKV0pXSldKV0pXSldLDEpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoiYmctY29sb3ItNSBwLTQgbWItMCJ9LFtfdm0uX3YoIlRhbnRvIGxhcyBwcm9waWVkYWRlcyBjb211bmVzIGNvbW8gbGFzIHByaXZhZGFzLCBzb24gZnVuZGFtZW50YWxlcyBwYXJhIGVsIGRlc2Fycm9sbG8gc29jaWFsIHkgZWNvbsOzbWljbyBkZSBDb2xvbWJpYS4gU2luIGVtYmFyZ28sIGVzIGltcHJlc2NpbmRpYmxlIHN1cGVyYXIgbG9zIGRlc2Fmw61vcyBhc29jaWFkb3MgYSBzdSBnZXN0acOzbiwgcGFyYSBnYXJhbnRpemFyIHVuIGVxdWlsaWJyaW8gZW50cmUgZWwgaW50ZXLDqXMgY29sZWN0aXZvIHkgbG9zIGRlcmVjaG9zIGluZGl2aWR1YWxlcy4gRXN0byBkZW1hbmRhIHVuIGNvbXByb21pc28gY29uanVudG8gZW50cmUgZWwgRXN0YWRvLCBsYXMgY29tdW5pZGFkZXMgeSBsb3MgcHJvcGlldGFyaW9zLCBwYXJhIHByZXNlcnZhciBlc3RvcyBiaWVuZXMgeSBtYXhpbWl6YXIgc3UgYXBvcnRlIGFsIGJpZW5lc3RhciBzb2NpYWwgeSBhbCBkZXNhcnJvbGxvIHNvc3RlbmlibGUuIildKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImJnLWZ1bGwtd2lkdGggYm9yZGVyLXRvcCBhY3RpdmlkYWQgYmctY29sb3ItYWN0aXZpZGFkIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoicC00IHAtbWQtNSJ9LFtfYygnZGl2Jyx7YXR0cnM6eyJpZCI6IkFjdGl2aWRhZCJ9fSxbX2MoJ0FjdGl2aWRhZCcse2F0dHJzOnsiY3Vlc3Rpb25hcmlvIjpfdm0uY3Vlc3Rpb25hcmlvfX0pXSwxKV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJiZy1mdWxsLXdpZHRoIGJvcmRlci10b3AgY29sb3ItcHJpbWFyaW8ifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJwLTQgcC1tZC01In0sW19jKCdoMicse2F0dHJzOnsiZGF0YS1hb3MiOiJmYWRlLWxlZnQifX0sW192bS5fdigiTUFURVJJQUwgQ09NUExFTUVOVEFSSU8iKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoicm93IG1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLTEyIGNvbC1tZC02IGNvbC1sZy03In0sW19jKCdwJyxbX3ZtLl92KCJMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4iKV0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6ImQtZmxleCBteS00In0sW19jKCdpbWcnLHtzdGF0aWNDbGFzczoibWUtMyIsc3R5bGU6KHsnbWF4LXdpZHRoJzonMTZweCd9KSxhdHRyczp7InNyYyI6cmVxdWlyZSgiQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmciKX19KSxfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9lcmVhZGVyL3RlY25vbG9naWNhZGVsb3JpZW50ZS82MDgzNyIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiTGFjcnV6IEouICgyMDA4KS4gRWxlbWVudG9zIGRlIGRlcmVjaG8gY2l2aWwuIFRvbW8gSUlJIGJpczogZGVyZWNobyBpbm1vYmlsaWFyaW8gcmVnaXN0cmFsICgyLiBlZC4pLiBEeWtpbnNvbiIpXSldKSxfYygncCcse3N0YXRpY0NsYXNzOiJkLWZsZXggbXktNCJ9LFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6Im1lLTMiLHN0eWxlOih7J21heC13aWR0aCc6JzE2cHgnfSksYXR0cnM6eyJzcmMiOnJlcXVpcmUoIkAvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnIil9fSksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL2FycXVpdGFzYS5jb20vdGlwb3MtYmllbmVzLyIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiQVJRVUlUQVNBLiAoMjAyNCkuIFRpcG9zIGRlIGJpZW5lcyAoYmxvZykuICIpXSldKSxfYygncCcse3N0YXRpY0NsYXNzOiJkLWZsZXggbXktNCJ9LFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6Im1lLTMiLHN0eWxlOih7J21heC13aWR0aCc6JzE2cHgnfSksYXR0cnM6eyJzcmMiOnJlcXVpcmUoIkAvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnIil9fSksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL2FwbGljYWNpb25lcy5haS9jYXNldGV4dC8iLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfdm0uX3YoIkRlcmVjaG8gcMO6YmxpY28geSBwcml2YWRvICIpXSldKSxfYygncCcse3N0YXRpY0NsYXNzOiJkLWZsZXggbXktNCJ9LFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6Im1lLTMiLHN0eWxlOih7J21heC13aWR0aCc6JzE2cHgnfSksYXR0cnM6eyJzcmMiOnJlcXVpcmUoIkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZyIpfX0pLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly95b3V0dS5iZS8zYUFTZ0VQNVpiRT9zaT1wY2RYTWhaejRuOERCUHJBICIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiUHJvcGllZGFkIEhvcml6b250YWwuICgyMDIxKS4gQmllbmVzIENvbXVuZXMgeSBQcml2YWRvcyBlbiBQcm9waWVkYWQgSG9yaXpvbnRhbC4iKV0pXSldKSxfdm0uX20oMTApXSldKV0pXSldLDEpfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJyb3cgbWItNSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC1sZy01IixhdHRyczp7ImRhdGEtYW9zIjoiZmFkZS1yaWdodCJ9fSxbX2MoJ2ZpZ3VyZScsW19jKCdpbWcnLHtzdGF0aWNDbGFzczoibWItNCBtYi1sZy0wIixhdHRyczp7InNyYyI6cmVxdWlyZSgiQC9hc3NldHMvY3Vyc28vdGVtYTMvMS5wbmciKSwiYWx0IjoiIn19KV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjb2wtbGctNyJ9LFtfYygncCcse3N0YXRpY0NsYXNzOiJtYi0wIn0sW192bS5fdigiRW4gQ29sb21iaWEsIGVsIGRlcmVjaG8gZGUgcHJvcGllZGFkIGVzdMOhIHJlZ3VsYWRvIHBvciBsYSBDb25zdGl0dWNpw7NuIFBvbMOtdGljYSB5IGVsIEPDs2RpZ28gQ2l2aWwsIGVzdGFibGVjaWVuZG8gdW4gbWFyY28ganVyw61kaWNvIHBhcmEgbGEgY29leGlzdGVuY2lhIGRlIHByb3BpZWRhZGVzIGNvbXVuZXMgeSBwcml2YWRhcy4gQ2FkYSB1bmEgZGUgZXN0YXMgY2F0ZWdvcsOtYXMgcHJlc2VudGEgY2FyYWN0ZXLDrXN0aWNhcywgcmVndWxhY2lvbmVzIHkgYXBsaWNhY2lvbmVzIGVzcGVjw61maWNhcywgZXNlbmNpYWxlcyBwYXJhIGVsIG1hbmVqbyBkZSBsb3MgYmllbmVzIHkgbGFzIHJlbGFjaW9uZXMganVyw61kaWNhcywgcXVlIHN1cmdlbiBhIHBhcnRpciBkZSBlbGxvcy4gRXN0YSBkaWZlcmVuY2lhY2nDs24gcGVybWl0ZSBnYXJhbnRpemFyIHRhbnRvIGVsIGludGVyw6lzIGNvbGVjdGl2byBjb21vIGxvcyBkZXJlY2hvcyBpbmRpdmlkdWFsZXMsIHByb21vdmllbmRvIHVuIGVxdWlsaWJyaW8gZW4gZWwgdXNvIHkgZGlzZnJ1dGUgZGUgbG9zIHJlY3Vyc29zIGRpc3BvbmlibGVzLiIpXSldKV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiYmctY29sb3ItMiBtYi01IixhdHRyczp7ImRhdGEtYW9zIjoiZmFkZS11cCJ9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjb2wtbGcgcC00IHB4LTUiLGF0dHJzOnsiZGF0YS1hb3MiOiJmYWRlLXJpZ2h0In19LFtfYygncCcse3N0YXRpY0NsYXNzOiJtYi0wIn0sW192bS5fdigiRWwgY29uY2VwdG8gZGUgcHJvcGllZGFkZXMgY29tdW5lcyBpbmNsdXllIGFxdWVsbG9zIGJpZW5lcyBxdWUsIHBvciBzdSBuYXR1cmFsZXphIG8gZGVzdGlubywgZXN0w6FuIGVuY2FtaW5hZG9zIGFsIHVzbyBjb21wYXJ0aWRvIGRlIHVuYSBjb2xlY3RpdmlkYWQuIEVuIENvbG9tYmlhLCBlc3RhIGNhdGVnb3LDrWEgYWJhcmNhIHRhbnRvIGJpZW5lcyBkZSB1c28gcMO6YmxpY28gY29tbyBiaWVuZXMgY29tdW5lcyBwcml2YWRvcywgc2Vnw7puIHN1IHRpdHVsYXJpZGFkIHkgZWwgYWxjYW5jZSBkZSBzdSB1c28uIildKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLWxnLWF1dG8iLGF0dHJzOnsiZGF0YS1hb3MiOiJmYWRlLWxlZnQifX0sW19jKCdmaWd1cmUnLFtfYygnaW1nJyx7YXR0cnM6eyJzcmMiOnJlcXVpcmUoIkAvYXNzZXRzL2N1cnNvL3RlbWEzLzIucG5nIiksImFsdCI6IiJ9fSldKV0pXSldKX0sZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InJvdyBtYi01In0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLWxnLTUiLGF0dHJzOnsiZGF0YS1hb3MiOiJmYWRlLXJpZ2h0In19LFtfYygnZmlndXJlJyxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOiJtYi00IG1iLWxnLTAiLGF0dHJzOnsic3JjIjpyZXF1aXJlKCJAL2Fzc2V0cy9jdXJzby90ZW1hMy8zLnBuZyIpLCJhbHQiOiIifX0pXSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC1sZy03IGJnLWNvbG9yLTEgcC00IGFsaWduLWNvbnRlbnQtY2VudGVyIn0sW19jKCdwJyx7c3RhdGljQ2xhc3M6Im1iLTAifSxbX2MoJ2InLFtfdm0uX3YoIkVqZW1wbG8gcHLDoWN0aWNvLiIpXSksX3ZtLl92KCIgRWwgcsOtbyBNYWdkYWxlbmEgZXMgdW4gYmllbiBkZSB1c28gcMO6YmxpY28sIGN1eWEgZ2VzdGnDs24gYWRlY3VhZGEgYXNlZ3VyYSBzdSBwcmVzZXJ2YWNpw7NuIGNvbW8gcmVjdXJzbyBow61kcmljbywgbWVkaW8gZGUgdHJhbnNwb3J0ZSB5IHBhdHJpbW9uaW8gYW1iaWVudGFsLiIpXSldKV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczoicm93IG1iLTUgYWxpZ24tY29udGVudC1jZW50ZXIifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjb2wtbGctNSBvcmRlci0yIn0sW19jKCdmaWd1cmUnLFtfYygnaW1nJyx7YXR0cnM6eyJzcmMiOnJlcXVpcmUoIkAvYXNzZXRzL2N1cnNvL3RlbWEzLzQucG5nIiksImRhdGEtYW9zIjoiem9vbS1pbiJ9fSldKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLWxnLTcgb3JkZXItMSJ9LFtfYygncCcse3N0YXRpY0NsYXNzOiJtYi01IixhdHRyczp7ImRhdGEtYW9zIjoiZmFkZS1sZWZ0In19LFtfdm0uX3YoIkVuIGVsIMOhbWJpdG8gcHJpdmFkbywgbG9zIGJpZW5lcyBjb211bmVzIHNvbiBhcXVlbGxvcyBxdWUgcGVydGVuZWNlbiBhIHVuIGdydXBvIGVzcGVjw61maWNvIGRlIHBlcnNvbmFzLCBjb21vIG9jdXJyZSBlbiBjb25qdW50b3MgcmVzaWRlbmNpYWxlcyB5IGVkaWZpY2lvcyBzb21ldGlkb3MgYWwgcsOpZ2ltZW4gZGUgcHJvcGllZGFkIGhvcml6b250YWwuIEVzdGFzIMOhcmVhcyBjb211bmVzIGluY2x1eWVuIGphcmRpbmVzLCBhc2NlbnNvcmVzLCBwYXNpbGxvcyB5IG90cmFzIGluZnJhZXN0cnVjdHVyYXMgY29tcGFydGlkYXMuIExhIExleSA2NzUgZGVsIDIwMDEsIHJlZ3VsYSBsYSBhZG1pbmlzdHJhY2nDs24gZGUgZXN0b3MgYmllbmVzLCBlc3RhYmxlY2llbmRvIHF1ZSBkZWJlbiBzZXIgdXRpbGl6YWRvcyB5IG1hbnRlbmlkb3MgZW4gYmVuZWZpY2lvIGRlIHRvZG9zIGxvcyBjb3Byb3BpZXRhcmlvcy4iKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiYmctY29sb3ItNyBwLTQiLGF0dHJzOnsiZGF0YS1hb3MiOiJmYWRlLWxlZnQifX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoicm93IGFsaWduLWl0ZW1zLXN0YXJ0In0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLWxnLWF1dG8ifSxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOiJteC1hdXRvIixzdGF0aWNTdHlsZTp7Im1heC13aWR0aCI6IjkwcHgifSxhdHRyczp7InNyYyI6cmVxdWlyZSgiQC9hc3NldHMvY3Vyc28vdGVtYTMvNS5zdmciKX19KV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLWxnIn0sW19jKCdwJyx7c3RhdGljQ2xhc3M6InRleHQtYm9sZCJ9LFtfdm0uX3YoIkVqZW1wbG8gcHLDoWN0aWNvIildKSxfYygncCcse3N0YXRpY0NsYXNzOiJtYi0wIn0sW192bS5fdigiRW4gdW4gZWRpZmljaW8gcmVzaWRlbmNpYWwsIGVsIG1hbnRlbmltaWVudG8gZGVsIGFzY2Vuc29yIHkgbGEgbGltcGllemEgZGUgbGFzIMOhcmVhcyBjb211bmVzLCBzb24gcmVzcG9uc2FiaWxpZGFkIGNvbXBhcnRpZGEgZGUgbG9zIHByb3BpZXRhcmlvcy4iKV0pXSldKV0pXSldKX0sZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImJnLWZ1bGwtd2lkdGggYmctZm9uZG8tMSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InB4LTQgcHgtbGctNSBwYi1tZC0zIn0sW19jKCdoMicse3N0YXRpY0NsYXNzOiJtYi01IixhdHRyczp7ImRhdGEtYW9zIjoiZmFkZS1yaWdodCJ9fSxbX3ZtLl92KCJJbXBvcnRhbmNpYSBkZSBsYXMgcHJvcGllZGFkZXMgY29tdW5lcyIpXSksX2MoJ3AnLFtfdm0uX3YoIkxvcyBiaWVuZXMgY29tdW5lcyBzb24gZXNlbmNpYWxlcyBwYXJhIGdhcmFudGl6YXIgZWwgYWNjZXNvIGVxdWl0YXRpdm8gYSByZWN1cnNvcywgcHJvbW92ZXIgbGEgY29udml2ZW5jaWEgeSBmb3J0YWxlY2VyIGxhIGNvaGVzacOzbiBzb2NpYWwuIEVuIGVsIMOhbWJpdG8gcMO6YmxpY28sIHBlcm1pdGVuIGVsIGRpc2ZydXRlIGRlIGRlcmVjaG9zIGZ1bmRhbWVudGFsZXMsIGNvbW8gbGEgbW92aWxpZGFkIHkgZWwgYWNjZXNvIGEgdW4gbWVkaW8gYW1iaWVudGUgc2Fuby4gRW4gZWwgw6FtYml0byBwcml2YWRvLCBmYWNpbGl0YW4gbGEgY29udml2ZW5jaWEgYWwgZXN0YWJsZWNlciByZWdsYXMgY2xhcmFzIHBhcmEgZWwgdXNvIGNvbXBhcnRpZG8gZGUgbGFzIMOhcmVhcyBjb211bmVzLiIpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoibWItNSJ9LFtfdm0uX3YoIkRlc2Fmw61vcyBkZSBsYXMgcHJvcGllZGFkZXMgY29tdW5lcyIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1zdHJldGNoIG1iLTUifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjb2wtbGctNCBtYi00IixhdHRyczp7ImRhdGEtYW9zIjoiem9vbS1pbi11cCJ9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjdXN0b20taW1hZ2UtY2FyZC0yIGgtMTAwIn0sW19jKCdpbWcnLHtzdGF0aWNDbGFzczoiY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlIixhdHRyczp7InNyYyI6cmVxdWlyZSgiQC9hc3NldHMvY3Vyc28vdGVtYTMvNi5wbmciKSwiYWx0IjoiIn19KSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImN1c3RvbS1pbWFnZS1jYXJkX190ZXh0IHAtNCJ9LFtfYygnaDUnLHtzdGF0aWNDbGFzczoibWItMiB0ZXh0LWNlbnRlciJ9LFtfdm0uX3YoIlByaXZhdGl6YWNpw7NuIGluZGViaWRhIildKSxfYygncCcse3N0YXRpY0NsYXNzOiJtYi0wIn0sW192bS5fdigiTGEgYXByb3BpYWNpw7NuIHBvciBwYXJ0ZSBkZSBwYXJ0aWN1bGFyZXMsIGRlIGJpZW5lcyBkZSB1c28gcMO6YmxpY28sIGNvbW8gcGxheWFzIHkgcsOtb3MsIHJlc3RyaW5nZSBlbCBhY2Nlc28gZGUgbGEgY29tdW5pZGFkLiIpXSldKV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjb2wtbGctNCBtYi00IixhdHRyczp7ImRhdGEtYW9zIjoiem9vbS1pbi1kb3duIn19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImN1c3RvbS1pbWFnZS1jYXJkLTIgaC0xMDAifSxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOiJjdXN0b20taW1hZ2UtY2FyZF9faW1hZ2UiLGF0dHJzOnsic3JjIjpyZXF1aXJlKCJAL2Fzc2V0cy9jdXJzby90ZW1hMy83LnBuZyIpLCJhbHQiOiIifX0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY3VzdG9tLWltYWdlLWNhcmRfX3RleHQgcC00In0sW19jKCdoNScse3N0YXRpY0NsYXNzOiJtYi0yIHRleHQtY2VudGVyIn0sW192bS5fdigiRmFsdGEgZGUgbWFudGVuaW1pZW50byIpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoibWItMCJ9LFtfdm0uX3YoIkVuIGNvbmp1bnRvcyByZXNpZGVuY2lhbGVzLCBsYSBnZXN0acOzbiBkZWZpY2llbnRlIGRlIMOhcmVhcyBjb211bmVzLCBwdWVkZSBnZW5lcmFyIGNvbmZsaWN0b3MgeSBkZXRlcmlvcm8uIildKV0pXSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC1sZy00IG1iLTQiLGF0dHJzOnsiZGF0YS1hb3MiOiJ6b29tLWluLWRvd24ifX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY3VzdG9tLWltYWdlLWNhcmQtMiBoLTEwMCJ9LFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6ImN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZSIsYXR0cnM6eyJzcmMiOnJlcXVpcmUoIkAvYXNzZXRzL2N1cnNvL3RlbWEzLzgucG5nIiksImFsdCI6IiJ9fSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjdXN0b20taW1hZ2UtY2FyZF9fdGV4dCBwLTQifSxbX2MoJ2g1Jyx7c3RhdGljQ2xhc3M6Im1iLTIgdGV4dC1jZW50ZXIifSxbX3ZtLl92KCJQcmVzacOzbiBhbWJpZW50YWwiKV0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6Im1iLTAifSxbX3ZtLl92KCJMYSBzb2JyZWV4cGxvdGFjacOzbiBkZSBiaWVuZXMgY29tdW5lcywgY29tbyByZWN1cnNvcyBow61kcmljb3MgbyBmb3Jlc3RhbGVzLCBwb25lIGVuIHJpZXNnbyBzdSBzb3N0ZW5pYmlsaWRhZC4iKV0pXSldKV0pXSldKV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczoicm93IG1iLTUganVzdGlmeS1jb250ZW50LWNlbnRlciJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC1sZy0xMCIsYXR0cnM6eyJkYXRhLWFvcyI6ImZhZGUtcmlnaHQifX0sW19jKCdwJyxbX3ZtLl92KCJMYSBwcm9waWVkYWQgcHJpdmFkYSBlcyB1biBkZXJlY2hvIGZ1bmRhbWVudGFsLCByZWNvbm9jaWRvIGVuIENvbG9tYmlhLCBjdXlhIHJlZ3VsYWNpw7NuIGVzdMOhIG9yaWVudGFkYSBhIHByb3RlZ2VyIGxhIGxpYmVydGFkIGluZGl2aWR1YWwgeSBwcm9tb3ZlciBlbCBkZXNhcnJvbGxvIGVjb27Ds21pY28sIGNvbiBlbCBkZWJlciBkZSBjdW1wbGlyIHVuYSBmdW5jacOzbiBzb2NpYWwsIGVuIGJlbmVmaWNpbyBkZWwgaW50ZXLDqXMgY29sZWN0aXZvLiBFc3RlIGRlcmVjaG8gZW5jdWVudHJhIHN1IGZ1bmRhbWVudG8gZW4gbGEgQ29uc3RpdHVjacOzbiBkZSAxOTkxIHkgZWwgQ8OzZGlnbyBDaXZpbCBDb2xvbWJpYW5vLiIpXSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC1tZC04IGNvbC1sZy0yIixhdHRyczp7ImRhdGEtYW9zIjoiZmFkZS1sZWZ0In19LFtfYygnZmlndXJlJyxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOiJtYi00IG1iLWxnLTAiLGF0dHJzOnsic3JjIjpyZXF1aXJlKCJAL2Fzc2V0cy9jdXJzby90ZW1hMy85LnBuZyIpLCJhbHQiOiIifX0pXSldKV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczoicm93IG1iLTUifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjb2wtbGctNCIsYXR0cnM6eyJkYXRhLWFvcyI6ImZhZGUtcmlnaHQifX0sW19jKCdmaWd1cmUnLFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6Im1iLTQgbWItbGctMCIsYXR0cnM6eyJzcmMiOnJlcXVpcmUoIkAvYXNzZXRzL2N1cnNvL3RlbWEzLzEwLnBuZyIpLCJhbHQiOiIifX0pXSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC1sZy04IGJnLWNvbG9yLTkgcC00In0sW19jKCdwJyx7c3RhdGljQ2xhc3M6Im1iLTAifSxbX3ZtLl92KCJEZXNkZSBsYSDDqXBvY2EgY29sb25pYWwsIGxhIHByb3BpZWRhZCBwcml2YWRhIGVuIENvbG9tYmlhLCBoYSBldm9sdWNpb25hZG8gZGUgc2VyIHVuIHByaXZpbGVnaW8gcmVzZXJ2YWRvIHBhcmEgbGFzIMOpbGl0ZXMsIGEgY29udmVydGlyc2UgZW4gdW4gZGVyZWNobyBhY2Nlc2libGUgYSB0b2RhIGxhIGNpdWRhZGFuw61hLiBEdXJhbnRlIGxhIGNvbG9uaWEsIGxhIHByb3BpZWRhZCBkZSB0aWVycmFzIGVzdGFiYSBsaW1pdGFkYSBhIGVuY29tZW5kZXJvcyB5IHRlcnJhdGVuaWVudGVzLCBwZXJwZXR1YW5kbyBsYSBjb25jZW50cmFjacOzbiBkZSBsYSB0aWVycmEuIENvbiBsYSBpbmRlcGVuZGVuY2lhIHkgZWwgZXN0YWJsZWNpbWllbnRvIGRlbCBFc3RhZG8gcmVwdWJsaWNhbm8sIGVsIGRlcmVjaG8gZGUgcHJvcGllZGFkIGZ1ZSBjb25zb2xpZGFkbyBlbiBlbCBDw7NkaWdvIENpdmlsIGRlbCBzaWdsbyBYSVgsIGF1bnF1ZSBwZXJzaXN0aWVyb24gbGFzIGRlc2lndWFsZGFkZXMgYWdyYXJpYXMuIildKV0pXSl9LGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJyb3cgYWxpZ24taXRlbXMtY2VudGVyIGJnLXBwYWwtYXp1bCBwLTQgbWItNSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC1sZy1hdXRvIG9yZGVyLTIiLGF0dHJzOnsiZGF0YS1hb3MiOiJmYWRlLXJpZ2h0In19LFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6Im14LWF1dG8iLHN0YXRpY1N0eWxlOnsibWF4LXdpZHRoIjoiOTBweCJ9LGF0dHJzOnsic3JjIjpyZXF1aXJlKCJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xMS5zdmciKX19KV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLWxnIG9yZGVyLTEifSxbX2MoJ3VsJyx7c3RhdGljQ2xhc3M6Imxpc3RhLXVsIG1iLTAifSxbX2MoJ2xpJyx7c3RhdGljQ2xhc3M6ImQtZmxleCJ9LFtfYygnaScse3N0YXRpY0NsYXNzOiJsaXN0YS11bF9fdmluZXRhIn0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6Im1iLTAifSxbX2MoJ2InLFtfdm0uX3YoIkV4Y2x1c2l2aWRhZC4iKV0pLF92bS5fdigiIEVsIHByb3BpZXRhcmlvIHRpZW5lIGNvbnRyb2wgYWJzb2x1dG8gc29icmUgZWwgYmllbi4iKV0pXSksX2MoJ2xpJyx7c3RhdGljQ2xhc3M6ImQtZmxleCJ9LFtfYygnaScse3N0YXRpY0NsYXNzOiJsaXN0YS11bF9fdmluZXRhIn0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6Im1iLTAifSxbX2MoJ2InLFtfdm0uX3YoIlRyYW5zZmVyaWJpbGlkYWQuIildKSxfdm0uX3YoIiBMb3MgYmllbmVzIHByaXZhZG9zIHB1ZWRlbiBzZXIgdmVuZGlkb3MsIGFycmVuZGFkb3MgbyBoZXJlZGFkb3MuIildKV0pLF9jKCdsaScse3N0YXRpY0NsYXNzOiJkLWZsZXgifSxbX2MoJ2knLHtzdGF0aWNDbGFzczoibGlzdGEtdWxfX3ZpbmV0YSJ9KSxfYygncCcse3N0YXRpY0NsYXNzOiJtYi0wIn0sW19jKCdiJyxbX3ZtLl92KCJGdW5jacOzbiBzb2NpYWwuIildKSxfdm0uX3YoIiBFc3RlIGRlcmVjaG8gZXN0w6EgY29uZGljaW9uYWRvIGFsIGJpZW5lc3RhciBjb2xlY3Rpdm8sIGNvbmZvcm1lIGEgbG8gZXN0aXB1bGFkbyBlbiBsYSBDb25zdGl0dWNpw7NuLiIpXSldKV0pXSldKX0sZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InJvdyBtYi01In0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLWxnLTUiLGF0dHJzOnsiZGF0YS1hb3MiOiJmYWRlLXJpZ2h0In19LFtfYygnZmlndXJlJyxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOiJtYi00IG1iLWxnLTAiLGF0dHJzOnsic3JjIjpyZXF1aXJlKCJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xMi5wbmciKSwiYWx0IjoiIn19KV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjb2wtbGctNyBiZy1jb2xvci0xIHAtNCBhbGlnbi1jb250ZW50LWNlbnRlciJ9LFtfYygncCcse3N0YXRpY0NsYXNzOiJtYi0wIn0sW192bS5fdigiRWwgQXJ0w61jdWxvIDU4IGRlIGxhIENvbnN0aXR1Y2nDs24sIGVzdGFibGVjZSBxdWUgbGEgcHJvcGllZGFkIHByaXZhZGEgZGViZSBjdW1wbGlyIHVuYSBmdW5jacOzbiBzb2NpYWwsIHkgc3UgZWplcmNpY2lvIG5vIHB1ZWRlIGlyIGVuIGNvbnRyYSBkZWwgaW50ZXLDqXMgZ2VuZXJhbC4gQWRlbcOhcywgZWwgQ8OzZGlnbyBDaXZpbCBkZWZpbmUgbGEgcHJvcGllZGFkIGVuIHN1IEFydMOtY3VsbyA2NjksIGNvbW8gZWwgZGVyZWNobyBkZSB1c2FyLCBnb3phciB5IGRpc3BvbmVyIGRlIHVuIGJpZW4gZGVudHJvIGRlIGxvcyBsw61taXRlcyBsZWdhbGVzLiBMYXMgbm9ybWF0aXZhcyBjb21wbGVtZW50YXJpYXMsIGNvbW8gbGEgTGV5IDkgZGUgMTk4OSB5IGxhIExleSAzODggZGUgMTk5NywgcmVndWxhbiBlbCB1c28gZGUgbGEgcHJvcGllZGFkIHByaXZhZGEgZW4gY29udGV4dG9zIHVyYmFub3MgeSBydXJhbGVzLCBidXNjYW5kbyBlcXVpbGlicmFyIGVsIGRlc2Fycm9sbG8gc29zdGVuaWJsZSwgY29uIGVsIHJlc3BldG8gYSBsb3MgZGVyZWNob3MgaW5kaXZpZHVhbGVzLiIpXSldKV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczoicm93IG1iLTUifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjb2wteGwtNyJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InRpdHVsby1maWd1cmEgbWItNCJ9LFtfYygnaDUnLFtfdm0uX3YoIlRhYmxhIDQuICIpXSksX2MoJ3NwYW4nLFtfdm0uX3YoIkNvbXBhcmFjacOzbiBlbnRyZSBwcm9waWVkYWRlcyBjb211bmVzIHkgcHJpdmFkYXMgIildKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoidGFibGEtYSBjb2xvci10ZXJjaWFyaW8gbWItNSIsYXR0cnM6eyJkYXRhLWFvcyI6Inpvb20taW4ifX0sW19jKCd0YWJsZScsW19jKCd0aGVhZCcsW19jKCd0cicsW19jKCd0aCcse3N0YXRpY0NsYXNzOiJiZy1jb2xvci00In0sW192bS5fdigiQXNwZWN0byIpXSksX2MoJ3RoJyx7c3RhdGljQ2xhc3M6ImJnLWNvbG9yLTQifSxbX3ZtLl92KCJQcm9waWVkYWRlcyBjb211bmVzIildKSxfYygndGgnLHtzdGF0aWNDbGFzczoiYmctY29sb3ItNCJ9LFtfdm0uX3YoIlByb3BpZWRhZGVzIHByaXZhZGFzIildKV0pXSksX2MoJ3Rib2R5JyxbX2MoJ3RyJyx7c3RhdGljQ2xhc3M6ImJnLWNvbG9yLTUifSxbX2MoJ3RkJyx7c3RhdGljQ2xhc3M6InRleHQtYm9sZCJ9LFtfdm0uX3YoIlRpdHVsYXJpZGFkIildKSxfYygndGQnLFtfdm0uX3YoIkRlbCBFc3RhZG8gbyBkZSB1biBncnVwbyBlc3BlY8OtZmljby4iKV0pLF9jKCd0ZCcsW192bS5fdigiRGUgdW5hIHBlcnNvbmEgbmF0dXJhbCBvIGp1csOtZGljYS4iKV0pXSksX2MoJ3RyJyx7c3RhdGljQ2xhc3M6ImJnLWNvbG9yLTUifSxbX2MoJ3RkJyx7c3RhdGljQ2xhc3M6InRleHQtYm9sZCJ9LFtfdm0uX3YoIlVzbyIpXSksX2MoJ3RkJyxbX3ZtLl92KCJDb21wYXJ0aWRvIHBvciBsYSBjb2xlY3RpdmlkYWQuIildKSxfYygndGQnLFtfdm0uX3YoIkV4Y2x1c2l2byBkZWwgcHJvcGlldGFyaW8uIildKV0pLF9jKCd0cicse3N0YXRpY0NsYXNzOiJiZy1jb2xvci01In0sW19jKCd0ZCcse3N0YXRpY0NsYXNzOiJ0ZXh0LWJvbGQifSxbX3ZtLl92KCJSZWd1bGFjacOzbiIpXSksX2MoJ3RkJyxbX3ZtLl92KCJDb25zdGl0dWNpw7NuLCBDw7NkaWdvIENpdmlsLCBMZXkgNjc1LiIpXSksX2MoJ3RkJyxbX3ZtLl92KCJDb25zdGl0dWNpw7NuLCBDw7NkaWdvIENpdmlsLCBMZXllcyBlc3BlY8OtZmljYXMuIildKV0pLF9jKCd0cicse3N0YXRpY0NsYXNzOiJiZy1jb2xvci01In0sW19jKCd0ZCcse3N0YXRpY0NsYXNzOiJ0ZXh0LWJvbGQifSxbX3ZtLl92KCJFamVtcGxvIildKSxfYygndGQnLFtfdm0uX3YoIlLDrW9zLCBwYXJxdWVzLCB6b25hcyBjb211bmVzIGVuIGVkaWZpY2lvcy4iKV0pLF9jKCd0ZCcsW192bS5fdigiQ2FzYXMsIGFwYXJ0YW1lbnRvcywgdmVow61jdWxvcy4iKV0pXSldKV0pXSldKV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLTEyIGNvbC1tZC02IGNvbC1sZy0zIG9mZnNldC1sZy0xIn0sW19jKCdmaWd1cmUnLFtfYygnaW1nJyx7YXR0cnM6eyJzcmMiOnJlcXVpcmUoIkAvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZyIpLCJhbHQiOiIifX0pXSldKX1dCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}